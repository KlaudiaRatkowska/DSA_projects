#include <iostream>
using namespace std;

#define smallestPrime 2

struct Suma {
    int* arr;
    int* primeNbArr;
    int number;
    int primeNb;
    int howManyPrimes;
};

void findPrimeNbs(Suma* suma) {
    bool isPrime = true;
    suma->arr[0] = suma->primeNb;
    suma->primeNbArr[0] = suma->primeNb;
    int secondPrime;
    int diff = suma->number - suma->primeNb;
    if (suma->primeNb > diff) {
        secondPrime = diff;
    }
    else {
        secondPrime = suma->primeNb - 1;
    }
    suma->howManyPrimes = 1;
    for (int i = secondPrime; i >= smallestPrime; i--)
    {
        for (int j = 2; j * j <= i; j++)
        {
            if (i % j == 0)
                isPrime = false; //gdy znajdziemy dzielnik, to dana liczba nie jest pierwsza
        }
        if (isPrime) {
            suma->primeNbArr[suma->howManyPrimes] = i;
            suma->howManyPrimes++;
        }
        isPrime = true;
    }
}

void coutArr(Suma* suma, int ilosc) {
    for (int i = 0; i < ilosc; i++) {
        if (i == ilosc - 1)
            cout << suma->arr[i] << '\n';
        else
            cout << suma->arr[i] << "+";
    }
}

int findIndex(Suma* suma, int number) {
    for (int i = 0; i <= suma->number; i++) {
        if (suma->arr[i] == number)
            return i;
    }
    return suma->arr[0];
}

int findNextPrime(Suma* suma, int firstSmallest) {
    for (int i = suma->howManyPrimes - 1; i > 0; i--) {
        if (suma->primeNbArr[i] == firstSmallest) {
            return suma->primeNbArr[i - 1];
        }
    }
    return 0;
}

void powrotDoDwojek(Suma* suma,int k, int n) {
    for (int i = k; i <= n; i++) {
        suma->arr[i] = smallestPrime;
    }
}

int findSum(Suma* suma) {
    int numbers = 1; //ilosc liczb
    const int diff = suma->number - suma->primeNb;
    int actualDiff = diff;
    int actualNb = 1;
    bool isNotFinish = true;
    for (int i = 1; i < suma->number / 2; i++) { //wyeplniamy talbice dwojkami bo ot najmniejsza liczba pierwsza
        suma->arr[i] = smallestPrime;
        numbers++;
    }
    while (isNotFinish)
    {
        for (int j = 1; j < numbers; j++)
        {
            if (actualDiff - suma->arr[j] > 0)
            {
                actualDiff -= suma->arr[j];
                actualNb++;
            }
            else if (actualDiff - suma->arr[j] == 0)
            {
                actualNb++;
                coutArr(suma, actualNb);
                int smallestNb = suma->arr[actualNb-1];
                int index = findIndex(suma, smallestNb);      //find index of the first smallest element
                if (index == 0) {
                    isNotFinish = false;
                }
        //        if (suma->arr[index] == suma->primeNbArr[0] || index==1) {
                    //         powrotDoDwojek(suma, actualNb +1);
                    powrotDoDwojek(suma, index + 1, actualNb + 1);
          //      }

                suma->arr[index] = findNextPrime(suma, smallestNb);
                if (suma->arr[index] == 0) {
                    isNotFinish = false;                 
                }
                     break;
            }
            else
            {
                int smallestNb = suma->arr[actualNb-1];
                int index = findIndex(suma, smallestNb);      //find index of the first smallest element
                if (index == 0) {
                    isNotFinish = false;
                }
                suma->arr[index] = findNextPrime(suma, smallestNb);
              //  if (index == 1) {
           //     if(suma->arr[index] == suma->primeNbArr[0] || index==1){
           //         powrotDoDwojek(suma, actualNb +1);
                    powrotDoDwojek(suma, index + 1, actualNb+1);
            //    }               
                if (suma->arr[index] == 0) {
                    isNotFinish = false;                   
                }
                break;

                    
            }
        }
        actualNb = 1;
        actualDiff = diff;
    }


    return 0;
}



bool ifIsPrime(int liczba) {
    if (liczba < 2)
        return false;
    for (int i = 2; i * i <= liczba; i++) {
        if (liczba % i == 0)
            return false; //gdy znajdziemy dzielnik, to dana liczba nie jest pierwsza
    }
    return true;
}


int main()
{
    Suma suma;
    int lineNb;
    bool isPrime = true;
    cin >> lineNb;
    for (int i = 0; i < lineNb; i++) {       
        cin >> suma.number >> suma.primeNb;
        if (suma.number % 2 != 0 && suma.primeNb == smallestPrime) {
            isPrime = false;
        }
        if (ifIsPrime(suma.primeNb) && isPrime == true) {
            if (suma.number == suma.primeNb)
                cout << suma.primeNb << '\n';
            else {
                suma.arr = (int*)malloc(sizeof(int) * suma.number);
                suma.primeNbArr = (int*)malloc(sizeof(int) * suma.primeNb);
                findPrimeNbs(&suma);
                findSum(&suma);
                free(suma.arr);
                free(suma.primeNbArr);
            }
        }
        isPrime = true;
        
    }
    return 0;
}
